generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Facilitator {
  id        Int              @id @default(autoincrement())
  name      String
  email     String           @unique
  createdAt DateTime         @default(now())
  timetable TimetableEntry[]
}

model TimetableEntry {
  id            Int          @id @default(autoincrement())
  week          String
  title         String
  details       String[]
  facilitatorId Int?
  createdAt     DateTime     @default(now())
  facilitator   Facilitator? @relation(fields: [facilitatorId], references: [id])
}

model Setting {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}

model Resource {
  id             Int      @id @default(autoincrement())
  title          String
  description    String?
  type           String   // 'pdf', 'uploaded-pdf', or 'link'
  url            String?  // For links or file path
  fileSize       Int?     // Size in bytes for uploaded files
  isUploadedFile Boolean  @default(false)
  createdAt      DateTime @default(now())
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  email       String   @unique
  name        String
  bio         String?
  avatar      String?  // Base64 image or URL
  isPublic    Boolean  @default(true)
  studyPoints Int      @default(0)
  joinDate    DateTime @default(now())
  lastActive  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  memberships StudyGroupMember[]
  ownedGroups StudyGroup[]

  @@map("users")
}

model StudyGroup {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  ownerId     Int
  isPublic    Boolean  @default(true)
  maxMembers  Int      @default(10)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner       User     @relation(fields: [ownerId], references: [id])
  members     StudyGroupMember[]

  @@map("study_groups")
}

model StudyGroupMember {
  id        Int        @id @default(autoincrement())
  userId    Int
  groupId   Int
  joinedAt  DateTime   @default(now())
  role      String     @default("member") // 'owner', 'admin', 'member'

  // Relations
  user      User       @relation(fields: [userId], references: [id])
  group     StudyGroup @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
  @@map("study_group_members")
}
